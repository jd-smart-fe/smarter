#!/usr/bin/env node

const program = require('commander');
const exists = require('fs').existsSync;
const path = require('path');
const ora = require('ora');
const chalk = require('chalk');
const inquirer = require('inquirer');
const generator = require('../utils/generator');
const assets = require('../utils/assets');

program
  .usage('<template-name> [project-name]')
  .option('-h', '--help', 'help')
  .parse(process.argv);

(() => {
  // 如果用户输入的是 init -h
  if (program.H) {
    help();
    return;
  } else if (program.args.length < 1) { // 没有跟任何参数的话，也自动调用 help()
    help();
    return;
  }

  function help() {
    // return;
    assets.getTemplatesConfig().then(list => {
      program.outputHelp();
      console.log();
      console.log();
      console.log('  Examples:');
      console.log();
      console.log(chalk.cyan('    # 生成一个 React 同构直出的脚手架'));
      console.log('    $ smarter init rephic project-dir');
      console.log();
      console.log();
      console.log('  Templates List:');
      console.log();

      list.forEach(item => {
        console.log(`    * ${item.name}  ${item.desc}`);
      });
      console.log();
      process.exit();
    });
  }

  // template name
  const template = program.args[0];
  // target dir
  let target = program.args[1];
  if (!target) {
    target = '.';
  }
  const inplace = target === '.';
  const local = path.resolve(target);

  process.on('exit', () => { });

  if (exists(local)) {
    inquirer
      .prompt([
        {
          type: 'confirm',
          message: inplace
            ? 'Generate project in current directory?'
            : 'Target directory exists. Continue?',
          name: 'ok',
        },
      ])
      .then(answers => {
        if (answers.ok) {
          run();
        }
      });
  } else {
    run();
  }

  function run() {
    console.log();
    console.log('The Template: ' + template);
    console.log('Target Directory: ' + local);
    console.log();
    create(template);
  }

  function create(_template) {
    const spinner = ora('Downloading template');

    spinner.start();

    generator(_template, local)
      .then(() => {
        spinner.stop();
        console.log(chalk.green('Generate template success!'));
      })
      .catch(e => {
        spinner.stop();
        console.log(chalk.red(e));
      });
  }
})();
